apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
  name: cicd
objects:
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: app-pipeline
  spec:
    triggers:
      - type: "Generic"
        generic:
          secretReference:
                name: "app"
          allowEnv: true
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
             pipeline {
               agent {
                 node {
                  label 'nodejs'
                 }
               }
               stages {
                 stage( 'Gerando build' ) {
                   steps {
                     git branch: 'stage', credentialsId: '666d9fae-0115-4085-a8c6-e4a5f12782d7', url: 'http://github/node-app.git'
                     sh "npm cache clear --force && npm install --no-shrinkwrap --update-binary && npm run build"
                   }
                 }  
                stage( 'Criando imagem' ) {
                  when {
                    expression {
                      openshift.withCluster() {
                        openshift.withProject('stage') {
                          return !openshift.selector("bc", "app").exists();
                        }
                      }
                    }
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject('stage') {
                          openshift.newBuild("--name=app", "--binary=true")
                        }
                      } 
                    } 
                  }
                } 
                stage( 'Construindo imagem' ) {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject('stage') {
                          openshift.selector("bc", "app").startBuild("--from-file='.'", "--wait=true")
                        }
                      }
                    }
                  }
                }
                stage( 'Promovendo tag' ) {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject('stage') {
                          openshift.tag("app:latest", "app:stage")
                        }
                      }
                    }
                  }
                }
                stage( 'Deploy' ) {
                  when {
                    expression {
                      openshift.withCluster() {
                        openshift.withProject('stage') {
                          return !openshift.selector('dc', 'app').exists()
                        }
                      }
                    }
                  }
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject('stage') {
                          openshift.newApp('app:stage')
                          sh "oc create service clusterip app --tcp=8080:8080 -n stage"
                          sh "oc expose svc app --hostname=URL_DO_FRONTEND --path=/app -n stage"
                        }
                       }
                      }
                     }
                    }
                   }
                 }
        type: JenkinsPipeline
- kind: Secret
  apiVersion: v1
  metadata:
    name: app
    creationTimestamp:
  data:
    WebHookSecretKey: anVyaXMtZnJvbnQ=
